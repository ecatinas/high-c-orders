"""
computing the asymptotic constants Q‚Çö and Œ∏
Newton iterates for solving x+2x¬≤
version 22-03-25
"""

function m‚Çõ(x)         # the mantissas of BigFloats may be too large to print; we extract a few first values
    chb = 5; che = 7  # no. of chars to extract from beginning (mantissa) resp. end (exponent)
    w = string(x)
    if length(w)>15; w = w[1:chb] * "..." * w[end-che:end] end
    return w
end
function ùëì(x::BigFloat)    # ùëì obtained by \itf, italic f
    return x + 2x^2
end
function ùëì‚Ä≤(x::BigFloat)
    return 1 + 4.0x
end
function ùëì‚Ä≥(x::BigFloat)
    return 4.0
end
myprec = 10^5 #113 for quadruple, 52 for double precision
setprecision(myprec)
println("############################","\n","epsBigFl=","\n",m‚Çõ(eps(BigFloat)),"\n")
N = 17  # max no of Newton iterations
p = BigFloat(2.0)

x‚É∞ = BigFloat(0.0)  #the solution
Œ∏‚É∞ = BigFloat(0.5) # conjecture!

x = zeros(BigFloat,N)
x[1] = 0.5
e, fx, f‚Ä≤x = zeros(BigFloat,N), zeros(BigFloat,N), zeros(BigFloat,N)

# #compute the Newton iterates; we store the values of f, f' in the vectors  fx, f'x
fx[1] = ùëì(x[1])
f‚Ä≤x[1] = ùëì‚Ä≤(x[1])
for k =2:N
    x[k] = x[k-1] - fx[k-1]/f‚Ä≤x[k-1]
    fx[k] = ùëì(x[k])
    f‚Ä≤x[k] = ùëì‚Ä≤(x[k])
end

Q‚Çö, Q‚Çö‚Ä≤, QÃÇ‚Çö‚Ä≤, Q‚Çö‚Ä≥, QÃÇ‚Çö‚Ä≥ = zeros(BigFloat,N), zeros(BigFloat,N), zeros(BigFloat,N), zeros(BigFloat,N), zeros(BigFloat,N)

println("time when computing e, s, Q‚Çö, Q‚Çö‚Ä≤, Q‚Çö‚Ä≥ and QÃÇ‚Çö‚Ä≥ in parallel")
@time begin
    Threads.@threads for k=1:N
        e[k] = abs(x‚É∞-x[k])
        fx[k] = abs(fx[k])
        f‚Ä≤x[k] = abs(f‚Ä≤x[k])
    end
    s = zeros(BigFloat,N)
    Threads.@threads for k=2:N
        s[k] = abs(x[k]-x[k-1])
    end
    Threads.@threads for k=2:N
        Q‚Çö[k] = e[k]/e[k-1]^p
        Q‚Çö‚Ä≤[k] = s[k]/s[k-1]^p
        Q‚Çö‚Ä≥[k] = fx[k]/fx[k-1]^p*f‚Ä≤x[k]
        QÃÇ‚Çö‚Ä≥[k] = fx[k]/fx[k-1]^p*f‚Ä≤x[k-1]^2/f‚Ä≤x[k]
    end
end

println("time when computing e, s, Q‚Çö, Q‚Çö‚Ä≤, Q‚Çö‚Ä≥ and QÃÇ‚Çö‚Ä≥ in vectorized form")
@time begin
    e = abs.(x‚É∞.-x)
    s[2:N] = abs.(x[2:N] - x[1:N-1])
    fx = abs.(fx)
    f‚Ä≤x = abs.(f‚Ä≤x)
    Q‚Çö[2:N] = e[2:N]./e[1:N-1].^p
    Q‚Çö‚Ä≤[2:N] = s[2:N]./s[1:N-1].^p
    Q‚Çö‚Ä≥[2:N] = fx[2:N]./fx[1:N-1].^p.*f‚Ä≤x[2:N]
    QÃÇ‚Çö‚Ä≥[2:N] = fx[2:N]./fx[1:N-1].^p.*f‚Ä≤x[1:N-1].^2 ./f‚Ä≤x[2:N]
end

println("##############################################################")

Q‚Çö‚É∞ = abs(ùëì‚Ä≥(x‚É∞)/(2ùëì‚Ä≤(x‚É∞)))
println("\nQ‚Çö‚É∞= ",m‚Çõ(Q‚Çö‚É∞),"\n")

# #print values
println("############################","\n","Q‚Çö","\n")
for k = N-7:N  println("k=",k-1, "  Q‚Çö=",m‚Çõ(Q‚Çö[k]),"  Q‚Çö‚Ä≤=",m‚Çõ(Q‚Çö‚Ä≤[k]),"  Q‚Çö‚Ä≥=",m‚Çõ(Q‚Çö‚Ä≥[k]),"  QÃÇp‚Ä≥=",m‚Çõ(QÃÇ‚Çö‚Ä≥[k]))  end
# #print errors
println("########","\n","errors in approximating Q‚Çö‚É∞: |Q‚Çö‚É∞-Q‚Çö|, |Q‚Çö‚É∞-Q‚Çö‚Ä≤|, |Q‚Çö‚É∞-Q‚Çö‚Ä≥|, |Q‚Çö‚É∞-QÃÇp‚Ä≥|","\n")
for k = N-7:N  println("k=",k-1, "  er Q‚Çö=",m‚Çõ(Q‚Çö‚É∞-Q‚Çö[k]),"  er Q‚Çö‚Ä≤=",m‚Çõ(Q‚Çö‚É∞-Q‚Çö‚Ä≤[k]),"  er Q‚Çö‚Ä≥=",m‚Çõ(Q‚Çö‚É∞-Q‚Çö‚Ä≥[k]),"  er QÃÇp‚Ä≥=",m‚Çõ(Q‚Çö‚É∞-QÃÇ‚Çö‚Ä≥[k]))  end #one should insert 'abs'

println("############################","\n","errors e‚Çñ=|x‚É∞-x‚Çñ|","\n")
for k = N-7:N  println("k=",k-1,"   e‚Çñ=",m‚Çõ(e[k]))  end
println("############################","\n","corrections s‚Çñ","\n")
for k=N-7:N  println("k=",k-1,"   s‚Çñ=",m‚Çõ(s[k])) end
println("############################","\n","nonlinear residuals f‚Çñ","\n")
for k=N-7:N  println("k=",k-1,"   f‚Çñ=",m‚Çõ(fx[k])) end
println("############################","\n","errors e‚Çñ approximated by f‚Çñ/f'‚Çñ","\n")
for k=N-7:N  println("k=",k-1,"   f‚Çñ/f'‚Çñ=",m‚Çõ(fx[k]/f‚Ä≤x[k])) end

println("=============================","\n","Œ∏‚Çñ's","\n")
# # it is not easy to put the hat on Œ∏ (and Greek symbols);
# # although possible (see the JuliaMono fonts at https://mono-math.netlify.app/#JuliaMono) this requires installation of some special programs
# # meanwhile we use the index "i" (improved) instead of the hat, and tÃÇ instead of theta hat
Œ∏, Œ∏·µ¢, Œ∏‚Ä≤, Œ∏·µ¢‚Ä≤, Œ∏‚Ä≥, Œ∏·µ¢‚Ä≥  = zeros(BigFloat,N), zeros(BigFloat,N), zeros(BigFloat,N), zeros(BigFloat,N), zeros(BigFloat,N), zeros(BigFloat,N)
Threads.@threads for i = 2:N
    Œ∏[i] = (e[i])^(1/p^(i-1))
    Œ∏·µ¢[i] = (e[i]*Q‚Çö[i])^(1/p^(i-1))
    Œ∏‚Ä≤[i] = (s[i])^(1/p^(i-2))
    Œ∏·µ¢‚Ä≤[i] = (s[i]*Q‚Çö‚Ä≤[i])^(1/p^(i-2))
    Œ∏‚Ä≥[i] = (fx[i])^(1/p^(i-1))
    Œ∏·µ¢‚Ä≥[i] = (fx[i]*QÃÇ‚Çö‚Ä≥[i]/f‚Ä≤x[i])^(1/p^(i-1))
end
for i=N-7:N
    # #print value
    # println("i=",i-1," Œ∏=",m‚Çõ(Œ∏[i]),"  Œ∏·µ¢=",m‚Çõ(Œ∏·µ¢[i]),"  Œ∏‚Ä≤=",m‚Çõ(Œ∏‚Ä≤[i]),"  Œ∏·µ¢‚Ä≤=",m‚Çõ(Œ∏·µ¢‚Ä≤[i]),"  Œ∏‚Ä≥=",m‚Çõ(Œ∏‚Ä≥[i]),"  Œ∏·µ¢‚Ä≥=",m‚Çõ(Œ∏·µ¢‚Ä≥[i]))
    # #print error
    println("i=",i-1," er Œ∏=",m‚Çõ(Œ∏‚É∞-Œ∏[i])," er Œ∏·µ¢=",m‚Çõ(Œ∏‚É∞-Œ∏·µ¢[i])," er Œ∏‚Ä≤=",m‚Çõ(Œ∏‚É∞-Œ∏‚Ä≤[i])," er Œ∏·µ¢‚Ä≤=",m‚Çõ(Œ∏‚É∞-Œ∏·µ¢‚Ä≤[i])," er Œ∏‚Ä≥=",m‚Çõ(Œ∏‚É∞-Œ∏‚Ä≥[i])," er Œ∏·µ¢‚Ä≥=",m‚Çõ(Œ∏‚É∞-Œ∏·µ¢‚Ä≥[i]))
end;  println("--")

x‚Çñ‚É∞ = zeros(BigFloat,N)   #extrapolated values using the asymptotic constants, e‚âàc‚ãÖŒ∏^p^k
x‚Çñ‚É∞f = zeros(BigFloat,N) #extrapolated values using error estimation e‚âàf/f'
Threads.@threads for i = 2:N
    x‚Çñ‚É∞[i] = x[i] - Œ∏·µ¢‚Ä≥[i]^(p^(i-1))/QÃÇ‚Çö‚Ä≥[i]  #/ÃÑ
    x‚Çñ‚É∞f[i] = x[i] - fx[i]/f‚Ä≤x[i]
end
e‚Çñ‚É∞f = abs.(x‚É∞.-x‚Çñ‚É∞f) #extrapolated by f
for i = N-5:N   println("k=",i-1,"  er x‚Çñ‚É∞f= ",m‚Çõ(e‚Çñ‚É∞f[i]))  end
e‚Çë = abs.(x‚É∞.-x‚Çñ‚É∞) #extrapolated by c, Œ∏
for i = N-5:N   println("i=",i-1,"  er x‚Çñ‚É∞= ",m‚Çõ(e‚Çë[i]))  end
